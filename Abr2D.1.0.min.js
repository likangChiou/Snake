class ArgumentError extends Error{constructor(msg){super(msg);this.name="ArgumentError";}}
class RequirementUnsatisfiedError extends Error{constructor(msg){super(msg);this.name="RequirementUnsatisfiedError";}}
class AbstractMethodUnimplementedError extends Error{constructor(msg){super(msg);this.name="AbstractMethodUnimplementedError";}}
class UnknownTypeError extends Error{constructor(msg){super(msg);this.name="UnknownTypeError";}}
class UnknownPatternError extends Error{constructor(msg){super(msg);this.name="UnknownPatternError";}}
class SpriteNotFoundError extends Error{constructor(msg){super(msg);this.name="SpriteNotFoundError";}}
class HitBoxNotFoundError extends Error{constructor(msg){super(msg);this.name="HitBoxNotFoundError";}}
class Polar{constructor(length,degree){this.length=length;this.degree=degree;}
get radians(){return this.degree*Math.PI/180;}}
class CoordinateXY{constructor(x,y){this.x=x;this.y=y;}}
class ColorRGB{constructor(color){this.color=color;}
toHex(){return this.color.toString();}
fromHex(hex){this.color=parseInt(hex,16);}
get blue(){return this.color&0xFF;}
set blue(value){this.color=(this.color&0xFFFF00)|(value&0xFF);}
get green(){return(this.color&0xFF00)>>8;}
set green(value){this.color=(this.color&0xFF00FF)|(value&0xFF)<<8;}
get red(){return this.color>>16;}
set red(value){this.color=(this.color&0x00FFFF)|(value&0xFF)<<16;}
setRGB(r,g,b){this.red=r;this.blue=b;this.green=g;}}
class ColorHSB{constructor(h,s,b){this.brightness=b;this.hue=h;this.saturation=s;}}
class Vector{constructor(x=0,y=0){this.x=x;this.y=y;}
get length(){return Math.sqrt(this.x*this.x+this.y*this.y);}
get radians(){return Math.atan2(this.y,this.x);}
rotate(radians){let cos=Math.cos(radians);let sin=Math.sin(radians);this.x=this.x*cos-this.y*sin;this.y=this.x*sin+this.y*cos;}
dot(otherVector){return this.x*otherVector.x+this.y*otherVector.y;}}
class Utils{static polarToXY(polar){if(!polar instanceof Polar){throw new ArgumentError(`"${polar}" is not an instance of Polar or its subclass.`);}
return new CoordinateXY(Math.cos(polar.radians)*polar.length,Math.sin(polar.radians)*polar.length);}
static XYToPolar(xy){if(!xy instanceof CoordinateXY){throw new ArgumentError(`"${xy}" is not an instance of CoordinateXY or its subclass.`)}
let x=xy.x,y=xy.y;let length=Math.sqrt(x*x+y*y);let radians=Math.atan2(y,x);return new Polar(length,radians*180/Math.PI);}
static RGBToHSB(rgb){if(!rgb instanceof ColorRGB){throw new ArgumentError(`${rgb} is not an instance of ColorRGB or its subclasses.`);}
let r=rgb.red;let g=rgb.green;let b=rgb.blue;let max=Math.max(r,g,b);let min=Math.min(r,g,b);if(max===0){return new ColorHSB(0,0,0);}
let delta=max-min;let brightness=max/255;let saturation=delta/max;let hue=getHueFromRGB(r,g,b);return new ColorHSB(hue,saturation,brightness);}
static isCollidingCircleRectangle(cx,cy,radius,rx,ry,width,height){let rectHalfWidth=width/2;let rectHalfHeight=height/2;let closestX=Math.max(rx-rectHalfWidth,Math.min(cx,rx+rectHalfWidth));let closestY=Math.max(ry-rectHalfHeight,Math.min(cy,ry+rectHalfHeight));let distanceX=cx-closestX;let distanceY=cy-closestY;let distanceSquared=(distanceX*distanceX)+(distanceY*distanceY);return distanceSquared<=(radius*radius);}}
function getHueFromRGB(r,g,b){let max=Math.max(r,g,b);let min=Math.min(r,g,b);let delta=max-min;if(max==r){if(g>b){return 0+(g-b)/delta*60;}else{return 360-(b-g)/delta*60;}}else if(max==g){return 120+(b-r)/delta*60;}else{return 240+(r-g)/delta*60;}}
class Pen{constructor(){}
drawText(layer,text,x,y,color="black",font="10px sans-serif"){let ctx=layer.ctx;ctx.save();ctx.fillStyle=color;ctx.font=font;ctx.fillText(text,x,y)
ctx.restore();}
strokeText(layer,text,x,y,color="black",font="10px sans-serif"){let ctx=layer.ctx;ctx.strokeStyle=color;ctx.font=font;ctx.strokeText(text,x,y)}
drawCircle(layer,x,y,radius,color="black"){let ctx=layer.ctx;ctx.save();ctx.beginPath();ctx.fillStyle=color;ctx.arc(x,y,radius,0,2*Math.PI);ctx.fill();ctx.closePath();ctx.restore();}
strokeCircle(layer,x,y,radius,color="black"){let ctx=layer.ctx;ctx.save();ctx.beginPath();ctx.fillStyle=color;ctx.arc(x,y,radius,0,2*Math.PI);ctx.stroke();ctx.closePath();ctx.restore();}
drawRect(layer,startX,startY,width,height,color="black"){let ctx=layer.ctx;ctx.save();ctx.fillStyle=color;ctx.fillRect(startX,startY,width,height);ctx.restore();}
strokeRect(layer,startX,startY,width,height,color="black"){let ctx=layer.ctx;ctx.save();ctx.fillStyle=color;ctx.strokeRect(startX,startY,width,height);ctx.restore();}
drawLine(layer,startX,startY,endX,endY,width=2,color="black"){let ctx=layer.ctx;ctx.save();ctx.beginPath();ctx.lineWidth=width;ctx.strokeStyle=color;ctx.moveTo(startX,startY);ctx.lineTo(endX,endY);ctx.stroke();ctx.closePath();ctx.restore()}
strokePolygon(layer,color,width,points){let ctx=layer.ctx;ctx.save();ctx.beginPath();ctx.moveTo(points[0][0],points[0][1]);for(let i=1;i<points.length;i++){let point=points[i];let[x,y]=point;ctx.lineTo(x,y);}
ctx.lineTo(points[0][0],points[0][1]);ctx.lineWidth=width;ctx.strokeStyle=color;ctx.stroke();ctx.closePath();ctx.restore();}
drawPolygon(layer,color,points){let ctx=layer.ctx;ctx.save();ctx.beginPath();ctx.moveTo(points[0][0],points[0][1]);for(let i=1;i<points.length;i++){let point=points[i];let[x,y]=point;ctx.lineTo(x,y);}
ctx.lineTo(points[0][0],points[0][1]);ctx.fillStyle=color;ctx.fill();ctx.closePath();ctx.restore();}}
class RandomGenerator{constructor(seed=0){this.seed=seed;this.next();}
next(){if(this.seed===0){this.seed=31415926535;}
this.seed=(this.seed*16807)%2147483647;return this.seed/2147483647;}
nextInt(min,max){return Math.floor(this.next()*(max-min)+min);}
randomString(length,chars="abcdefghijklmnopqrstuvwxyz"){let str="";for(let i=0;i<length;i++){let index=this.nextInt(0,chars.length);str+=chars.charAt(index);}
return str;}}
class EventManager{#listeners=new Map();constructor(){}
addEvent(event){if(!this.hasEvent(event)){this.#listeners.set(event,[]);}}
addEvents(...events){events.forEach(e=>{this.addEvent(e);})}
addListener(event,callback){if(this.hasEvent(event)){this.#listeners.get(event).push(callback);}}
removeListener(event,listener){let handlers=this.#listeners.get(event);handlers.splice(handlers.indexOf(listener),1);listener=undefined;}
trigger(event){if(this.hasEvent(event)){this.#listeners.get(event).forEach(func=>{func.call();})}}
clearEventHandlers(event){if(this.hasEvent(event)){this.#listeners.get(event).length=0;}}
clearAllEvents(){this.#listeners.clear();}
deleteEvent(event){if(this.hasEvent(event)){this.#listeners.delete(event);}}
hasEvent(event){return this.#listeners.has(event);}
get eventList(){return[...this.#listeners.keys()];}}
class Key{static states={};static#handleDown=e=>{this.states[e.key]=1;}
static#handleUp=e=>{this.states[e.key]=0;}
static setEnabled(enable=true){this.reset();if(enable){document.addEventListener('keydown',this.#handleDown)
document.addEventListener('keyup',this.#handleUp)}else{document.removeEventListener('keydown',this.#handleDown);document.removeEventListener('keyup',this.#handleUp);}}
static pressed(key){return!!this.states[key];}
static reset(){this.states={};}}
Key.setEnabled(true);class Cursor{static x=0;static y=0;static screenX=0;static screenY=0;static isDown=false;static#handleMove=e=>{this.screenX=e.screenX;this.screenY=e.screenY;this.x=e.clientX;this.y=e.clientY;}
static#handleDown=e=>{this.isDown=true;}
static#handleUp=e=>{this.isDown=false;}
static setEnabled(enable=true){if(enable){document.addEventListener('mousemove',this.#handleMove);document.addEventListener('mousedown',this.#handleDown);document.addEventListener('mouseup',this.#handleUp);}else{document.removeEventListener('mousemove',this.#handleMove);document.addEventListener('mousedown',this.#handleDown);document.addEventListener('mouseup',this.#handleUp);}}}
Cursor.setEnabled();class Sound{constructor(music,forever=false){this.audio=new Audio();this.audio.src=music;this.audio.loop=forever;}
play(){this.audio.play();}
pause(){if(!this.audio.paused)this.audio.pause();}
mute(muted){this.audio.muted=muted;}
setPlaybackRate(rate){this.audio.playbackRate=rate;}
toString(){return`Sound src=${this.audio.src} loop=${this.audio.loop}`;}
static playSound(music,forever=false){var a=new Audio(music);a.loop=forever;a.oncanplaythrough=()=>{a.play();}}}
class HitBox{constructor(x,y){this.x=x;this.y=y;this.color="red";}
collidesWith(otherBox){return this.checkCollide(otherBox);}
checkCollide(otherBox){throw new AbstractMethodUnimplementedError("the method checkCollide should be overwritten by subclasses");}
getType(){return this.name;}
moveTo(x,y){this.x=x,this.y=y;}
move(offsetX,offsetY){this.x+=offsetX;this.y+=offsetY;}
show(ctx){throw new AbstractMethodUnimplementedError("the method show should be overwritten by subclasses");}
getName(){return this.constructor.name;}}
class RoundHitBox extends HitBox{constructor(x,y,r){super(x,y);this.r=r;}
checkCollide(otherBox){if(otherBox instanceof RoundHitBox){let dx=this.x-otherBox.x;let dy=this.y-otherBox.y;let totalR=this.r+otherBox.r;return dx**2+dy**2<totalR**2;}else if(otherBox instanceof RectHitBox){return Utils.isCollidingCircleRectangle(this.x,this.y,this.r,otherBox.x,otherBox.y,otherBox.hw*2,otherBox.hh*2);}else if(otherBox.hasOwnProperty('x')&&otherBox.hasOwnProperty('y')){if(((this.x-otherBox.x)**2+(this.y-otherBox.y)**2)<this.r**2){return true;}else{return false;}}else{throw new UnknownTypeError(`Unknown hit box type: ${otherBox.getName()}`);}}
show(ctx){ctx.beginPath();ctx.strokeStyle=this.color;ctx.lineWidth=2;ctx.arc(this.x,this.y,this.r,0,Math.PI*2);ctx.stroke();ctx.closePath();}}
class RectHitBox extends HitBox{constructor(x,y,hw,hh){super(x,y);this.hw=hw;this.hh=hh;}
checkCollide(otherBox){if(otherBox instanceof RoundHitBox){return Utils.isCollidingCircleRectangle(otherBox.x,otherBox.y,otherBox.r,this.x,this.y,this.hw*2,this.hh*2);}else if(otherBox instanceof RectHitBox){let nx=this.x-this.hw,ny=this.y-this.hh,mx=this.x+this.hw,my=this.y+this.hh,onx=otherBox.x-otherBox.hw,ony=otherBox.y-otherBox.hh,omx=otherBox.x+otherBox.hw,omy=otherBox.y+otherBox.hh;if(nx>omx||mx<onx)return false;if(ny>omy||my<ony)return false;return true;}else if(otherBox.hasOwnProperty('x')&&otherBox.hasOwnProperty('y')){if(Math.abs(otherBox.x-this.x)<this.hw&&Math.abs(otherBox.y-this.y)<this.hh){return true;}else{return false;}}else{throw new UnknownTypeError(`Unknown HitBox type: ${otherBox.getName()}`);}}
show(ctx){ctx.beginPath();ctx.lineWidth=2;ctx.strokeStyle=this.color;ctx.strokeRect(this.x-this.hw,this.y-this.hh,this.hw*2,this.hh*2);ctx.closePath();}}
class Recyclable{constructor(){this.broken=false;}
reset(){}}
class RecyclePool{constructor(constructorFunc){this.items=[];this.func=constructorFunc;}
getInstance(...parameters){while(this.items.length){let instance=this.items.pop();if(!instance.broken){instance.reset(...parameters);return instance;}}
return new this.func(...parameters);}
recycle(item){if(!item.broken&&!this.items.includes(item)){this.items.push(item);}}}
class Renderable extends Recyclable{#degree=0;_x;_y;constructor(name,x=0,y=0,w=0,h=0){super();this.owner=null;this.name=name;this._x=x,this._y=y;this.w=w,this.h=h;this.#degree=0;this.zIndex=0;this.visible=true;this.canRemove=false;this.opacity=1;this.scaleX=1;this.scaleY=1;}
reset(name,x=0,y=0,w=0,h=0){this.owner=null;this.name=name;this._x=x,this._y=y;this.w=w,this.h=h;this.#degree=0;this.zIndex=0;this.visible=true;this.canRemove=false;this.opacity=1;this.scaleX=1;this.scaleY=1;}
get x(){return this._x;}
set x(value){this._x=value;return value;}
get y(){return this._y;}
set y(value){this._y=value;return value;}
update(){}
render(ctx){throw new AbstractMethodUnimplementedError("The method render() is abstract, must be implemented by subclasses.");}
get degree(){return this.#degree;}
set degree(value){if(value<0){while(value<0){value+=360;}
this.#degree=value;}else if(value>360){this.#degree=value%360;}else{this.#degree=value;}}}
class Sprite extends Renderable{#costumesArr=[];#hitBoxes=[];constructor(name,costumes,x=0,y=0,w=0,h=0){super(name,x,y,w,h);this.costumeId=0;this.vx=0,this.vy=0;this.ax=0,this.ay=0;this.#costumesArr=costumes.map(cos=>{let img=new Image();img.src=cos;return img;})}
get x(){return this._x;}
set x(value){let tmp=this._x;this._x=value;let ox=this._x-tmp;for(const h of this.#hitBoxes){h.move(ox,0);}
return value;}
get y(){return this._y;}
set y(value){let tmp=this._y;this._y=value;let oy=this._y-tmp;for(const h of this.#hitBoxes){h.move(0,oy);}
return value;}
addHitBox(hitBox){this.#hitBoxes.push(hitBox);hitBox.x=this.x;hitBox.y=this.y;}
createRoundHitBox(radius){var rh=new RoundHitBox(this.x,this.y,radius);this.addHitBox(rh);return rh;}
createRectHitBox(offsetX,offsetY,width,height){var rh=new RectHitBox(this.x+offsetX,this.y+offsetY,width/2,height/2);this.addHitBox(rh);return rh;}
createDefaultHitBox(type){switch(type){case"round":this.createRoundHitBox(this.w/2);break;case"rect":this.createRectHitBox(0,0,this.w,this.h);break;default:throw new UnknownTypeError(`Unknown hit box type: ${type}`);}}
touches(sprite){if(sprite.hitBoxes){for(const hitBox of this.#hitBoxes){for(const otherHitBox of sprite.hitBoxes){if(hitBox.collidesWith(otherHitBox)){return true;}}}
return false;}else{for(const hitBox of this.#hitBoxes){if(hitBox.collidesWith(sprite)){return true;}}
return false;}}
touchSprites(spritesArray){for(const sprite of spritesArray){if(this.touches(sprite)){return true;}}
return false;}
destroy(){this.canRemove=true;}
get hitBoxes(){return this.#hitBoxes;}
deleteHitBox(hitBox){let idx=this.#hitBoxes.indexOf(hitBox);if(idx!=-1){this.#hitBoxes.splice(idx,1);}else{throw new HitBoxNotFoundError(`${hitBox} not found`);}}
moveTo(x,y){this.x=x,this.y=y;}
move(xOffset,yOffset){this.x+=xOffset,this.y+=yOffset;}
step(){this.vx+=this.ax,this.vy+=this.ay;this.x+=this.vx,this.y+=this.vy;}
stepForward(steps){let offsetX=Math.cos((90-this.degree)*Math.PI/180)*steps;let offsetY=Math.sin((90-this.degree)*Math.PI/180)*steps;
this.move(offsetX,-offsetY);}
update(){this.step();}
showHitBox(bool=true){this.showHit=bool;}
toward(sprite){var dx=sprite.x-this.x;var dy=sprite.y-this.y;var deg=(Math.atan2(dy,dx)*180)/Math.PI;this.degree=90+deg;}
distanceTo(sprite){return Math.sqrt((sprite.x-this.x)**2+(sprite.y-this.y)**2);}
render(ctx){var img=this.#costumesArr[this.costumeId];ctx.save();ctx.globalAlpha=this.opacity;ctx.translate(this.x,this.y);ctx.rotate(this.degree*Math.PI/180);ctx.scale(this.scaleX,this.scaleY);ctx.drawImage(img,this.w/ -2,this.h/ -2,this.w,this.h);ctx.restore();if(this.showHit){for(const h of this.#hitBoxes){h.show(ctx);}}}}
class Scene{#sprites=[];#namedSprites={};constructor(name,x=0,y=0,width=300,height=200){this.name=name;this.x=x,this.y=y,this.width=width,this.height=height;this.holder=$(`<div id="${this.name}" style="position:absolute; left:0px; top:0px;"></div>`);this.setPos(this.x,this.y);this.setSize(this.width,this.height);this.eventManager=new EventManager();this.eventManager.addEvents("beforeRender","afterRender");}
addListener(event,callback){this.eventManager.addListener(event,callback);}
clearListeners(event){this.eventManager.clearEventHandlers(event);}
setPos(x=0,y=0){this.x=x;this.y=y;this.holder.css("left",this.x).css("top",this.y);}
setSize(w=300,h=200){this.width=w,this.height=h;this.holder.css("width",this.width).css("height",this.height);}
addSprite(sprite){sprite.owner=this;this.#sprites.push(sprite);this.#namedSprites[sprite.name]=sprite;}
removeSpriteByName(name){if(this.#namedSprites[name]){this.#namedSprites[name].canRemove=true;}else{throw new SpriteNotFoundError(`The Sprite named ${name} was not found`);}}
removeAllRemovable(){this.#sprites.forEach((s,i)=>{if(s.canRemove){delete this.#namedSprites[s.name];this.#sprites.splice(i,1);}})}
getSpriteByName(name){var s=this.#namedSprites[name];if(s){return s;}else{throw new SpriteNotFoundError(`Sprite named ${name} not found.`);}}
clearAllSprites(){this.#sprites.length=0;this.#namedSprites={};}
update(){this.#sprites.forEach(s=>{s.update();})
this.removeAllRemovable();}
sortSprites(){this.#sprites.sort((a,b)=>{return a.zIndex-b.zIndex;})}
render(ctx){this.eventManager.trigger("beforeRender");this.sortSprites();ctx.clearRect(0,0,this.width,this.height);for(let i=0;i<this.#sprites.length;i++){const sprite=this.#sprites[i];sprite.update();if(sprite.visible){sprite.render(ctx);}}
this.eventManager.trigger("afterRender");}
createSprite(name,costumes,x=0,y=0,w=0,h=0){var s=new Sprite(name,costumes,x,y,w,h);this.addSprite(s);return s;}}
class SceneManager{constructor(){this.namedScenes={};this.scenes=[];this.currentScene=undefined;this.currentIndex=0;}
setCurrentScene(name){this.currentScene=this.getScene(name);this.currentIndex=this.scenes.indexOf(this.currentScene);}
setCurrentIndex(idx){this.currentIndex=idx;this.currentScene=this.scenes[idx];}
createScene(name,x=0,y=0,width=300,height=200){var scn=new Scene(name,x,y,width,height);this.addScene(scn);if(!this.currentScene){this.setCurrentScene(name);}
return scn;}
addScene(scene){if(scene instanceof Scene){this.scenes.push(scene);this.namedScenes[scene.name]=scene;}}
popScene(){let sc=this.scenes.pop();if(sc){this.namedScenes[sc.name]=undefined;sc=undefined;}}
getScene(name){return this.namedScenes[name];}
removeScene(name){var sc=this.getScene(name);if(sc){this.namedScenes[sc.name]=undefined;let scns=this.scenes;scns.slice(scns.indexOf(sc),1);sc=undefined;this.sortSceneIndex();}}
clearAll(){this.scenes=[];this.namedScenes={};}}
const BackgroundPatterns={NO_REPEAT:0,CENTER:1,REPEAT:2};class Game{#layers;constructor(div){this.eventManager=new EventManager();this.eventManager.addEvents("beforeRender","afterRender");this.mainloop=undefined;this.div=div;this.div.css("position","relative");this.#layers={"background":new Layer("Background",this.div.width(),this.div.height()),"front":new Layer("Front",this.div.width(),this.div.height())};for(let lyr in this.#layers){var data=this.#layers[lyr].holder;this.div.append(data);}}
init(){this.paused=false;}
addListener(event,callback){this.eventManager.addListener(event,callback);}
clearListeners(event){this.eventManager.clearEventHandlers(event);}
forever(callback){if(typeof callback==="function"){this.mainloop=callback;}}
run(fps=60){var spf=(1000/fps)|0;this.handle=setInterval(()=>{if(!this.paused){this.eventManager.trigger("beforeRender");this.renderLayers();this.mainloop.call(null);this.eventManager.trigger("afterRender");}},spf)}
pause(){this.paused=true;}
stop(){window.clearInterval(this.handle);}
renderLayers(){for(let key in this.#layers){var data=this.#layers[key];if(data)data.renderScenes();}}
getLayer(name){return this.#layers[name];}
addLayer(lyr){this.#layers[lyr.name]=lyr;}
setBackdrop(fileName,pattern){this.div.css("background-image",`url(${fileName})`);switch(pattern){case BackgroundPatterns.NO_REPEAT:this.div.css("background-repeat","no-repeat").css("background-position","center");break;case BackgroundPatterns.CENTER:this.div.css("background-size",`${this.div.width()}px ${this.div.height()}px`);break;case BackgroundPatterns.REPEAT:break;default:throw new UnknownPatternError(`Unknown pattern code:${pattern}`);}}
setColor(color){this.bgColor=color;this.div.css("background-color",this.bgColor);}}
class Layer{constructor(name,w,h){this.name=name;this.holder=$(`<div id="${this.name}" style="position:absolute; left:0px; top:0px; overflow:hidden;"></div>`);this.canvas=$(`<canvas id="scene_${this.name}" style="position:absolute; left:0px; top:0px;"></canvas>`);this.ctx=this.canvas.get(0).getContext("2d");this.holder.append(this.canvas);this.setSize(w,h);this.eventManager=new EventManager();this.eventManager.addEvents("beforeRender","afterRender");this.sceneManager=new SceneManager();}
addListener(event,callback){this.eventManager.addListener(event,callback);}
clearListeners(event){this.eventManager.clearEventHandlers(event);}
addScene(scene){this.sceneManager.addScene(scene);this.holder.append(scene.holder);}
renderScenes(){this.eventManager.trigger("beforeRender");var currScene=this.sceneManager.currentScene;if(currScene){currScene.render(this.ctx);}
this.eventManager.trigger("afterRender");}
setSize(w=300,h=200){this.width=w,this.height=h;this.holder.css("width",this.width).css("height",this.height);this.canvas.attr("width",this.width).attr("height",this.height);}
createScene(name,x=0,y=0,width=300,height=200){return this.sceneManager.createScene(name,x,y,width,height);}
get scenes(){return this.sceneManager.scenes;}
get cursorX(){return Cursor.x-this.canvas.get(0).getBoundingClientRect().left;}
get cursorY(){return Cursor.y-this.canvas.get(0).getBoundingClientRect().top;}
get cursor(){return{x:this.cursorX,y:this.cursorY}}}